server:
  port: 8080
  error:
    include-message: always
  servlet:
    context-path: /api
info:
  build-timestamp: @maven.build.timestamp@
  project-version: @project.version@
spring:
  application:
    name: @project.name@

  # Datasources
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres_demo?useSSL=false
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: false
    open-in-view: false
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # Cache
#  cache:
#    cache-names:
#      - rate-limit-buckets
#    caffeine:
#      spec: maximumSize=100000,expireAfterAccess=3600s

# bucket4j
#bucket4j:
#  enabled: true
#  filters:
#    - cache-name: rate-limit-buckets
#      url: /api/v1/area.*
#      strategy: first
#      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
#      rate-limits:
#        - expression: "getHeader('X-api-key')"
#          execute-condition: "getHeader('X-api-key').startsWith('PX001-')"
#          bandwidths:
#            - capacity: 100
#              time: 1
#              unit: hours
#        - expression: "getHeader('X-api-key')"
#          execute-condition: "getHeader('X-api-key').startsWith('BX001-')"
#          bandwidths:
#            - capacity: 40
#              time: 1
#              unit: hours
#        - expression: "getHeader('X-api-key')"
#          bandwidths:
#            - capacity: 20
#              time: 1
#              unit: hours